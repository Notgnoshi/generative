# Generative Art

[![GitHub Actions status](https://github.com/Notgnoshi/generative/workflows/Tests/badge.svg)](https://github.com/Notgnoshi/generative/actions)
[![GitHub Actions status](https://github.com/Notgnoshi/generative/workflows/Pylint/badge.svg)](https://github.com/Notgnoshi/generative/actions)
[![GitHub Actions status](https://github.com/Notgnoshi/generative/workflows/Black/badge.svg)](https://github.com/Notgnoshi/generative/actions)
[![Code style: black](https://img.shields.io/badge/code%20style-black-000000.svg)](https://github.com/psf/black)

A polyglot collection of composable generative art tools, with a focus on 2D computational geometry.

# Table of contents

* [How to build](#how-to-build)
* [Philosophy](#philosophy)
* [Examples](#examples)
  * [Asemic writing](#asemic-writing)
  * [Random L-Systems](#random-l-systems)
* [The tools](#the-tools)
  * [Lindenmayer systems](#lindenmayer-systems)
    * [parse-production-rules.py](#parse-production-rulespy)
    * [random-production-rules.py](#random-production-rulespy)
    * [interpret-lstring.py](#interpret-lstringpy)
    * [random-lsystem.sh](#random-lsystemsh)
  * [Generation](#generation)
    * [point-cloud](#point-cloud)
    * [grid](#grid)
  * [Algorithms](#algorithms)
    * [bitwise](#bitwise)
    * [dla](#dla)
    * [streamline](#streamline)
    * [traverse](#traverse)
    * [urquhart](#urquhart)
  * [Transformations](#transformations)
    * [project.py](#projectpy)
    * [geom2graph](#geom2graph)
    * [smooth](#smooth)
    * [snap](#snap)
    * [transform](#transform)
  * [Utilities](#utilities)
    * [wkt2svg](#wkt2svg)
    * [render.py](#renderpy)
    * [bundle](#bundle)
    * [pack](#pack)
    * [format.py](#formatpy)

# How to build
This project contains a mix of Rust, C++, and Python. It's primarily Rust.

Install dependencies with
```sh
# Python dependencies
python3 -m venv --prompt generative .venv
source .venv/bin/activate
python3 -m pip install -r requirements.txt
# C++ dependencies
sudo apt install build-essential cmake ninja-build
git submodule update --init --recursive
```

The Rust build has been configured to also perform the C++ CMake build, so all you need is
```sh
cargo build
```

If you don't want to build the C++ parts, you can do
```sh
cargo build --no-default-features
```
but note that this will disable building the [`geom2graph`](#geom2graph) tool.

You can run the Python tests with
```sh
source .venv/bin/activate
pytest
```
and the Rust tests with
```sh
cargo test
```
If the C++ tests have been enabled with `--all-features`, or `--features=cxx-tests`, they are copied
to `target/debug/cxx-tests`.

# Philosophy

There is a [`generative`](./generative/) Rust/C++/Python library, but the user is expected to use
the [CLI tools](./tools/) instead. I'm enamored with the Unix philosophy, so each tool does its best
to produce/consume a standard textual interface.
* Each tool read/writes to/from `stdin`/`stdout`
* Logging is done to `stderr`
* Geometries are in [WKT](https://en.wikipedia.org/wiki/Well-known_text_representation_of_geometry)
  format, one geometry per line
* Graphs are in [TGF](https://en.wikipedia.org/wiki/Trivial_Graph_Format) format

# Examples
## Asemic writing
The following snippet generates random asemic writing glyphs
```sh
@ASEMIC_SETUP_SNIPPET@
```

To generate random glyphs, we'll:
1. Take a geometry graph
2. Perform random traverals of the graph
3. (optionally) Smooth each traversal into a curve
```sh
@ASEMIC_RANDOM_ROUNDED_SNIPPET@
```
![](@ASEMIC_RANDOM_ROUNDED@)
The `--untraversed` points could be replaced with diacritical marks.

We could also use the triangulation of a random point cloud
```sh
@ASEMIC_RANDOM_TRIANGULATED_SNIPPET@
```
![](@ASEMIC_RANDOM_TRIANGULATED@)

Neither of these approaches give a coherent sense of self-similarity that's necessary for linguistic
glyphs. If, instead of using a random point cloud, we use a regular grid, that dramatically changes
the sense of self-similarity.
```sh
@ASEMIC_GRID_ROUNDED_SNIPPET@
```
![](@ASEMIC_GRID_ROUNDED@)

We can also reduce the number of smoothing iterations to get beveled corners
```sh
@ASEMIC_GRID_BEVELED_SNIPPET@
```
![](@ASEMIC_GRID_BEVELED@)

We could also regular triangle grid, to get loopier results, with no vertical lines
```sh
@ASEMIC_GRID_TRIANGULATED_SNIPPET@
```
![](@ASEMIC_GRID_TRIANGULATED@)

Using a slanted grid makes _almost_ compelling cursive, if only the jarring horizontal lines were
removed.
```sh
@ASEMIC_GRID_JAGGED_SNIPPET@
```
![](@ASEMIC_GRID_JAGGED@)

## Random L-Systems
[examples/random-lsystems/saved.json](examples/random-lsystems/saved.json) contains parameters for
randomly (pre)generated Lindenmayer systems.
```sh
@RANDOM_LSYSTEMS_SNIPPET@
```
@RANDOM_LSYSTEM_IMAGES@

# The tools

## Lindenmayer Systems
### parse-production-rules.py
The `parse-production-rules.py` tool takes a set of production rules, and a starting axiom, and
interprets the rules on the axiom for some specified number of iterations
```sh
$ ./tools/parse-production-rules.py --rule 'a -> ab' --rule 'b -> a' --axiom a --iterations 3
abaab
```

This tool supports context-free, stochastic, and context-sensitive grammars, with rules of the form
```
[left_context<] lhs [>right_context] [:probability] -> rhs
#ignore: tok1,tok2,tok3
```
The `[]` square brackets denote optional parts of the production rule.

### random-production-rules.py
The `random-production-rules.py` tool generates a random set of production rules in JSON form that
`parse-production-rules.py --config` knows how to read.
```sh
$ ./tools/random-production-rules.py --seed 4290989563 |
    ./tools/parse-production-rules.py --config - --iterations 3
|v]->^][<>^[[
```

### interpret-lstring.py
These L-strings can then be interpreted with a 3D turtle. Each symbol controls the turtle's motion
through space.
```sh
$ ./tools/parse-production-rules.py --config ./examples/lsystems/sierpinski-tree.json |
    ./tools/interpret-lstring.py |
    tail -n 4
LINESTRING Z (0 -126.48885271170681 224.54772721475285, 0 -125.48885271170681 224.54772721475285)
LINESTRING Z (0 -128.61017305526647 226.6690475583125, 0 -125.61017305526647 226.6690475583125, 0 -124.90306627407992 225.96194077712596)
LINESTRING Z (0 -125.61017305526647 226.6690475583125, 0 -124.61017305526647 226.6690475583125)
LINESTRING Z (0 -125.61017305526647 226.6690475583125, 0 -124.90306627407992 227.37615433949907)
```
Notice that the geometries are in 3D WKT. They can be rendered in an interactive 3D OpenGL viewer
([render.py](#renderpy)) or projected to 2D ([project.py](#projectpy) before being converted to SVG
with [wkt2svg](#wkt2svg).

```sh
./tools/parse-production-rules.py --config ./examples/lsystems/sierpinski-tree.json |
    ./tools/interpret-lstring.py |
    ./tools/project.py --kind=yz |
    wkt2svg --output ./examples/lsystems/sierpinski-tree.svg
```
![](./examples/lsystems/sierpinski-tree.svg)

### random-lsystem.sh
`random-production-rules.py` generates a great many duds (See
[#83](https://github.com/Notgnoshi/generative/issues/83)), so `random-lsystem.sh` is an easy way of
generating and visualizing random L-Systems quickly.
```
$ ./tools/random-lsystem.sh
2024-03-03 08:57:05,580 - tools/random-production-rules.py - INFO - Using random seed 1063093925
{"seed": 1063093925, "rules": ["G -> [>[v[[|v-|<F>GG[v", "G -> v]<|", "F -> <^v"], "axiom": "G"}
2024-03-03 08:57:05,926 - tools/render.py - INFO - Loaded 64 segments and 0 points.
```

<!-- GitHub doesn't support inline .webm :( -->
<!-- ffmpeg -i examples/lsystems/random-lsystem.webm -pix_fmt rgb8 examples/lsystems/random-lsystem.gif -->
![random-lsystem.gif](./examples/lsystems/random-lsystem.gif)

## Generation
### point-cloud
### grid

## Algorithms
### bitwise
### dla
### streamline
### traverse
### triangulate
### urquhart

## Transformations
### project.py
### geom2graph
### smooth
### snap
### transform

## Utilities
### wkt2svg
### render.py
### bundle
### pack
### format.py
